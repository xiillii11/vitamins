# -*- coding: utf-8 -*-
"""model1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PKRBRolqAocaak69SQgRj9HDPzNZyZVC
"""

import pandas as pd

# Sample user data
user_data = {
    'Vitamin_D_Level': 25,
    'Vitamin_B12_Level': 280,
    'Vitamin_C_Level': 1.0,
    'Iron_Level': 9,
    'Calcium_Level': 8.5,
    'Magnesium_Level': 1.5,
    'Potassium_Level': 3.8
}

# Function to generate meal plan with timing
def generate_daily_meal_plan_with_timing(row):
    recommendations = []
    timing = []
    before_after = []
    warning = []

    if row['Vitamin_D_Level'] < 30:
        recommendations.append('Salmon, Egg Yolk, Mushrooms')
        timing.append('Breakfast')
        before_after.append('With')
        warning.append('Take with a meal that includes fat')

    if row['Vitamin_B12_Level'] < 300:
        recommendations.append('Meat, Dairy, Eggs')
        timing.append('Breakfast or Lunch')
        before_after.append('With')
        warning.append('Take with a meal for better absorption')

    if row['Vitamin_C_Level'] < 1:
        recommendations.append('Citrus Fruits, Bell Peppers, Strawberries')
        timing.append('Morning')
        before_after.append('Before')
        warning.append('Avoid taking with calcium')

    if row['Iron_Level'] < 10:
        recommendations.append('Spinach, Red Meat, Lentils')
        timing.append('Any Meal')
        before_after.append('With')
        warning.append('Take with Vitamin C, avoid taking with calcium or zinc')

    if row['Calcium_Level'] < 9:
        recommendations.append('Milk, Cheese, Yogurt')
        timing.append('Evening')
        before_after.append('Before')
        warning.append('Avoid taking with Iron or Vitamin C')

    if row['Magnesium_Level'] < 1.8:
        recommendations.append('Nuts, Whole Grains, Dark Chocolate')
        timing.append('Evening')
        before_after.append('Before')
        warning.append('To promote relaxation')

    if row['Potassium_Level'] < 4:
        recommendations.append('Bananas, Oranges, Potatoes')
        timing.append('Any Meal')
        before_after.append('With')
        warning.append('Take with meals for better absorption')

    daily_plan = []
    for i in range(len(recommendations)):
        daily_plan.append({'Meal': 'Breakfast' if i == 0 else 'Lunch' if i == 1 else 'Dinner' if i <= 3 else 'Snack',
                            'Foods': recommendations[i],
                            'Nutrient': 'Vitamin D' if i == 0 else 'Vitamin B12' if i == 1 else 'Vitamin C' if i == 2 else 'Iron' if i == 3 else 'Calcium' if i == 4 else 'Magnesium' if i == 5 else 'Potassium',
                            'Before/After': before_after[i],
                            'Warning': warning[i]})

    return pd.DataFrame(daily_plan)

# Convert user data to pandas Series
user_row = pd.Series(user_data)

# Generate meal plan with timing
meal_plan_with_timing = generate_daily_meal_plan_with_timing(user_row)

# Print the meal plan as a table
print(meal_plan_with_timing.to_markdown(index=False, numalign="left", stralign="left"))